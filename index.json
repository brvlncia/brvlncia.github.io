[{"content":"\r\rScitKitLearn Simple Linear Regression Implementation with Sample Dataset\rI load in the necessary libraries.\n\rimport pandas as pd\rfrom sklearn import model_selection, linear_model\rI read my dataset in with pandas and define my features.\ndf = pd.read_csv(\u0026#39;dataset.csv\u0026#39;)\rfeatures = [\u0026#39;col0\u0026#39;,\u0026#39;col1\u0026#39;,\u0026#39;col2\u0026#39;,\u0026#39;col3\u0026#39;,\u0026#39;col4\u0026#39;,\u0026#39;col5\u0026#39;,\u0026#39;col6\u0026#39;,\u0026#39;col7\u0026#39;,\u0026#39;col8\u0026#39;,\u0026#39;col9\u0026#39;,\u0026#39;col10\u0026#39;]\rI define my model and set an X and y variable to set up cross-validation.\nmodel = linear_model.LinearRegression()\rX = df[features]\ry = df.label\rxval = model_selection.KFold(10, shuffle=True)\rresults = model_selection.cross_validate(model, X, y, cv=xval, scoring=\u0026#39;r2\u0026#39;, return_train_score=True)\rI calculate mean R^2 and standard deviation.\ntrain_r2 = results[\u0026#39;train_score\u0026#39;].mean()\rtrain_r2_sd = results[\u0026#39;train_score\u0026#39;].std()\rtest_r2 = results[\u0026#39;test_score\u0026#39;].mean()\rtest_r2_sd = results[\u0026#39;test_score\u0026#39;].std()\r\r","permalink":"https://brvlncia.github.io/post/ml-regression-scikitlearn/","summary":"ScitKitLearn Simple Linear Regression Implementation with Sample Dataset\rI load in the necessary libraries.\n\rimport pandas as pd\rfrom sklearn import model_selection, linear_model\rI read my dataset in with pandas and define my features.\ndf = pd.read_csv(\u0026#39;dataset.csv\u0026#39;)\rfeatures = [\u0026#39;col0\u0026#39;,\u0026#39;col1\u0026#39;,\u0026#39;col2\u0026#39;,\u0026#39;col3\u0026#39;,\u0026#39;col4\u0026#39;,\u0026#39;col5\u0026#39;,\u0026#39;col6\u0026#39;,\u0026#39;col7\u0026#39;,\u0026#39;col8\u0026#39;,\u0026#39;col9\u0026#39;,\u0026#39;col10\u0026#39;]\rI define my model and set an X and y variable to set up cross-validation.\nmodel = linear_model.LinearRegression()\rX = df[features]\ry = df.label\rxval = model_selection.KFold(10, shuffle=True)\rresults = model_selection.","title":"Machine Learning Regression Implementation with SciKit Learn"},{"content":"\r\rToday I will be scraping Regular Show’s IMDB page. I will compare the ratings of every other season for a total of 4 seasons.\nSeason 1 Ratings Scrape:\rs1_page \u0026lt;- read_html(\u0026quot;https://www.imdb.com/title/tt1710308/episodes?season=1\u0026quot;)\rs1_title \u0026lt;- s1_page %\u0026gt;% html_nodes(\u0026quot;#episodes_content strong a\u0026quot;) %\u0026gt;% html_text()\rs1_stars \u0026lt;- s1_page %\u0026gt;% html_nodes(\u0026quot;.ipl-rating-star.small .ipl-rating-star__rating\u0026quot;) %\u0026gt;% html_text() %\u0026gt;% as.numeric()\r\rSeason 3 Ratings Scrape:\rs3_page \u0026lt;- read_html(\u0026quot;https://www.imdb.com/title/tt1710308/episodes?season=3\u0026quot;)\rs3_title \u0026lt;- s3_page %\u0026gt;% html_nodes(\u0026quot;#episodes_content strong a\u0026quot;) %\u0026gt;% html_text()\rs3_stars \u0026lt;- s3_page %\u0026gt;% html_nodes(\u0026quot;.ipl-rating-star.small .ipl-rating-star__rating\u0026quot;) %\u0026gt;% html_text() %\u0026gt;% as.numeric()\r\rSeason 5 Ratings Scrape:\rs5_page \u0026lt;- read_html(\u0026quot;https://www.imdb.com/title/tt1710308/episodes?season=5\u0026quot;)\rs5_title \u0026lt;- s5_page %\u0026gt;% html_nodes(\u0026quot;#episodes_content strong a\u0026quot;) %\u0026gt;% html_text()\rs5_stars \u0026lt;- s5_page %\u0026gt;% html_nodes(\u0026quot;.ipl-rating-star.small .ipl-rating-star__rating\u0026quot;) %\u0026gt;% html_text() %\u0026gt;% as.numeric()\r\rSeason 7 Ratings Scrape:\rs7_page \u0026lt;- read_html(\u0026quot;https://www.imdb.com/title/tt1710308/episodes?season=7\u0026quot;)\rs7_title \u0026lt;- s7_page %\u0026gt;% html_nodes(\u0026quot;#episodes_content strong a\u0026quot;) %\u0026gt;% html_text()\rs7_stars \u0026lt;- s7_page %\u0026gt;% html_nodes(\u0026quot;.ipl-rating-star.small .ipl-rating-star__rating\u0026quot;) %\u0026gt;% html_text() %\u0026gt;% as.numeric()\r\rDataframe Construction:\rtitle = c(s1_title, s3_title, s5_title, s7_title)\rrating = c(s1_stars, s3_stars, s5_stars, s7_stars)\rranges = 1:125\rseason = c(rep(\u0026quot;1\u0026quot;, 13),\rrep(\u0026quot;3\u0026quot;, 39),\rrep(\u0026quot;5\u0026quot;, 37),\rrep(\u0026quot;7\u0026quot;, 36))\rep_num = c(1:13,41:80,121:156,192:227)\roverall \u0026lt;- data.frame(title, rating, season, ep_num)\rI will use experiment with visualization techniques to find one that is most effective.\n\rSeason 1 Rating by Episode\roverall %\u0026gt;%\rfilter(season == 1) %\u0026gt;%\rggplot(aes(y = rating, x = ep_num)) + geom_point() +\rgeom_smooth(method = \u0026quot;lm\u0026quot;, se = TRUE) +\rlabs (x = \u0026quot;Episode Number\u0026quot;, y = \u0026quot;Rating\u0026quot;, title = \u0026quot;Season 1 Episode Ratings\u0026quot;)\r## `geom_smooth()` using formula \u0026#39;y ~ x\u0026#39;\r\rThis graph very simply shows the number of episodes per season. No real relationship is represented here.\n\rggplot(overall, aes(x = season)) +\rtheme_classic() +\rgeom_bar()\rggplot(overall, aes(x=ep_num, y=rating)) + geom_point(aes(col=season, size=rating)) + geom_smooth(method=\u0026quot;loess\u0026quot;, se=F)\r## `geom_smooth()` using formula \u0026#39;y ~ x\u0026#39;\r\rI concluded that it was hard to do unique visualization as two of my variables were very strongly correlated, episode number and season number. I think it would have been valuable to get another variable but I am not sure what that may be.\n\r\r","permalink":"https://brvlncia.github.io/post/regular-show-analysis/","summary":"Today I will be scraping Regular Show’s IMDB page. I will compare the ratings of every other season for a total of 4 seasons.\nSeason 1 Ratings Scrape:\rs1_page \u0026lt;- read_html(\u0026quot;https://www.imdb.com/title/tt1710308/episodes?season=1\u0026quot;)\rs1_title \u0026lt;- s1_page %\u0026gt;% html_nodes(\u0026quot;#episodes_content strong a\u0026quot;) %\u0026gt;% html_text()\rs1_stars \u0026lt;- s1_page %\u0026gt;% html_nodes(\u0026quot;.ipl-rating-star.small .ipl-rating-star__rating\u0026quot;) %\u0026gt;% html_text() %\u0026gt;% as.numeric()\r\rSeason 3 Ratings Scrape:\rs3_page \u0026lt;- read_html(\u0026quot;https://www.imdb.com/title/tt1710308/episodes?season=3\u0026quot;)\rs3_title \u0026lt;- s3_page %\u0026gt;% html_nodes(\u0026quot;#episodes_content strong a\u0026quot;) %\u0026gt;% html_text()\rs3_stars \u0026lt;- s3_page %\u0026gt;% html_nodes(\u0026quot;.","title":"Regular Show IMDB Web Scrape and Data Analysis"},{"content":"\r\rYou weren’t supposed to see this :)\r\r","permalink":"https://brvlncia.github.io/about/","summary":"\r\rYou weren’t supposed to see this :)\r\r","title":"About Me"},{"content":"\r\rUndergraduate student\r\rSkills\r\r\r\rProgramming languages\rPython, R, MySQL\r\rOperating systems\rLinux, Windows\r\rNatural languages\rEnglish, Spanish\r\r\r\r\rEducation\rUniversity of Illinois Urbana-Champaign\rB.Sc. in Information Sciences, Focus on Data Analytics / Data Science August 2019 – May 2023\r\r\r\rExperience\rInstitute for Genomic Biology\rUndergraduate Research Assistant August 2020 – March 2021\r\r\rRelevant Coursework\rPrivacy and Information Technology\r\rIntroduction to Data Science (R)\r\rProgramming for Information Problems (Python)\r\rIntroduction to Database Technology Concepts and Architecture (MySQL)\r\r\r\r","permalink":"https://brvlncia.github.io/resume/","summary":"\r\rUndergraduate student\r\rSkills\r\r\r\rProgramming languages\rPython, R, MySQL\r\rOperating systems\rLinux, Windows\r\rNatural languages\rEnglish, Spanish\r\r\r\r\rEducation\rUniversity of Illinois Urbana-Champaign\rB.Sc. in Information Sciences, Focus on Data Analytics / Data Science August 2019 – May 2023\r\r\r\rExperience\rInstitute for Genomic Biology\rUndergraduate Research Assistant August 2020 – March 2021\r\r\rRelevant Coursework\rPrivacy and Information Technology\r\rIntroduction to Data Science (R)\r\rProgramming for Information Problems (Python)\r\rIntroduction to Database Technology Concepts and Architecture (MySQL)\r\r\r\r","title":"Resume"}]